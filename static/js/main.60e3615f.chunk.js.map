{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/Search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handlechange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GAAD,OAEhB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GACrB,OACK,qBAAMC,UAAY,YAAlB,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJ7CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,uBACAZ,UAAU,SACNa,KAAK,SAASF,YAAaA,EAAYG,SAAUF,MCoC1CG,E,kDApCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAa,IAJJ,E,qDAOb,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAMxC,WAAS,IAAD,EAC0BC,KAAKN,MAA7Bb,EADF,EACEA,SAASU,EADX,EACWA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.60e3615f.chunk.js","sourcesContent":["import React from'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>\r\n(\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react'; \r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = props => {\r\n   return ( \r\n        < div className = \"card-list\" > \r\n        {props.monsters.map(monster=> (<Card key={monster.id} monster={monster}/>)) }\r\n        \r\n         </div> \r\n        );\r\n }","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder,handlechange})=>\r\n(\r\n    <input \r\n    className='search'\r\n        type='search' placeholder={placeholder}onChange={handlechange}\r\n          />\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/Search-box/search-box.component'\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField: ''\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users =>this.setState({monsters:users}));\n  }\n  handlechange = (e) =>\n  {\n    this.setState({searchField: e.target.value})\n  }\n  render(){\n    const { monsters,searchField} = this.state;\n    const filteredmonsters=monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n\n    )\n    return(   \n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n          <SearchBox\n            placeholder='search monsters'\n            handlechange={this.handlechange} \n          />\n\n        <CardList monsters={filteredmonsters} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}